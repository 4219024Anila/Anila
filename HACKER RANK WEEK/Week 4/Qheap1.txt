#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Max heap size, adjust as needed
#define MAX_HEAP_SIZE 100005

int heap[MAX_HEAP_SIZE];
int size = 0;

// Function to swap two elements in the heap array
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to heapify up (swim)
void heapifyUp(int i) {
    while (i > 1 && heap[i] < heap[i / 2]) {
        swap(&heap[i], &heap[i / 2]);
        i /= 2;
    }
}

// Function to heapify down (sink)
void heapifyDown(int i) {
    int leftChild = 2 * i;
    int rightChild = 2 * i + 1;
    int smallest = i;

    if (leftChild <= size && heap[leftChild] < heap[smallest]) {
        smallest = leftChild;
    }
    if (rightChild <= size && heap[rightChild] < heap[smallest]) {
        smallest = rightChild;
    }

    if (smallest != i) {
        swap(&heap[i], &heap[smallest]);
        heapifyDown(smallest);
    }
}

// Function to insert an element
void insert(int val) {
    size++;
    heap[size] = val;
    heapifyUp(size);
}

// Function to delete an element (requires finding its index)
void deleteElement(int val) {
    int i;
    for (i = 1; i <= size; i++) {
        if (heap[i] == val) {
            break;
        }
    }

    if (i <= size) { // Element found
        heap[i] = heap[size]; // Replace with last element
        size--;
        heapifyDown(i); // Re-heapify from the replaced position
    }
}

// Function to print the minimum element
void printMin() {
    if (size > 0) {
        printf("%d\n", heap[1]);
    }
}

int main() {
    int Q;
    scanf("%d", &Q);

    while (Q--) {
        int type;
        scanf("%d", &type);

        if (type == 1) {
            int val;
            scanf("%d", &val);
            insert(val);
        } else if (type == 2) {
            int val;
            scanf("%d", &val);
            deleteElement(val);
        } else if (type == 3) {
            printMin();
        }
    }

    return 0;
}